/*! For license information please see CoCreate-render-key.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.CoCreate=F():(Q.CoCreate=Q.CoCreate||{},Q.CoCreate["render-key"]=F())}(this,(function(){return(()=>{"use strict";var __webpack_modules__={"../CoCreate-action/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n// -testing1\nconst CoCreateAction = {\n  attribute: 'data-actions',\n  actions: {},\n  selectedStage: [],\n  stageIndex: 0,\n  selectedElement: null,\n  completedEventName: 'completedEvent',\n  __init: function () {\n    this.actionButtonEvent();\n  },\n  // init: function(container) {\n  //   const __container = container || document\n  //   if (!__container.querySelectorAll) {\n  // \treturn;\n  // }\n  // let buttons = __container.querySelectorAll(\"[data-actions]\");\n  // for (let i = 0; i < buttons.length; i++) {\n  //   this.actionButtonEvent(buttons[i]);\n  // }\n  // },\n  // actionButtonEvent: function(btn) {\n  //   const _this = this;    \n  // let checkActions = btn.getAttribute('data-actions') || \"\";\n  // checkActions = checkActions.replace(/\\s/g, '').split(',');\n  // if (checkActions.length == 0) {\n  //   return;\n  // }\n  //   btn.addEventListener('click', function(event) {\n  //     event.preventDefault();\n  //     let actions = this.getAttribute(_this.attribute) || \"\";\n  //     actions = actions.replace(/\\s/g, '').split(',');\n  //     _this.stageIndex = 0;\n  //     _this.selectedStage = actions;\n  //     //. run function\n  //     _this.selectedElement = btn;\n  //     _this.__runActionFunc();\n  //   })\n  // },\n  actionButtonEvent: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      let btn = event.target;\n\n      if (!btn.getAttribute('data-actions')) {\n        btn = event.target.closest('[data-actions]');\n      }\n\n      if (!btn) return;\n      event.preventDefault();\n      let actions = (btn.getAttribute(self.attribute) || \"\").replace(/\\s/g, '').split(',');\n      if (actions.length == 0) return;\n      self.stageIndex = 0;\n      self.selectedStage = actions; //. run function\n\n      self.selectedElement = btn;\n\n      self.__runActionFunc();\n    });\n  },\n  init: function ({\n    action,\n    callback,\n    endEvent\n  }) {\n    this.registerEvent(action, callback, null, endEvent);\n  },\n\n  /**\n   * key: string\n   * runFunc: function\n   * instance: object\n   * endEvent: string\n   **/\n  registerEvent: function (key, runFunc, instance, endEvent) {\n    if (this.actions[key]) {\n      return;\n    }\n\n    this.actions[key] = {\n      key: key,\n      runFunc: runFunc,\n      instance: instance || window,\n      endEvent: endEvent\n    }; //. register events\n\n    for (let __key in this.actions) {\n      if (__key != key && this.actions[__key]['endEvent'] === endEvent) {\n        return;\n      }\n    } //. register events\n\n\n    const _this = this;\n\n    document.addEventListener(endEvent, function (e) {\n      _this.__nextAction(endEvent, e.detail);\n    });\n  },\n  __runActionFunc: function (data) {\n    if (this.stageIndex >= this.selectedStage.length) {\n      //. if latest case, it will be run aTag\n      if (this.stageIndex == this.selectedStage.length) {\n        this.__runAtag(this.selectedElement);\n      }\n\n      return;\n    }\n\n    const key = this.selectedStage[this.stageIndex]; //. run function\n\n    const action = this.actions[key];\n\n    if (action) {\n      if (action.runFunc) {\n        action.runFunc.call(null, this.selectedElement, data);\n      } else {\n        this.__nextAction(action.endEvent, {});\n      }\n    }\n  },\n  __nextAction: function (eventName, data) {\n    const key = this.selectedStage[this.stageIndex];\n\n    if (!key) {\n      return;\n    }\n\n    if (eventName !== this.actions[key].endEvent) {\n      return;\n    }\n\n    this.stageIndex++;\n\n    this.__runActionFunc(data);\n  },\n  __runAtag: function (button) {\n    var aTag = button.querySelector('a');\n\n    if (aTag) {\n      CoCreate.logic.setLinkProcess(aTag);\n    }\n  }\n};\n\nCoCreateAction.__init();\n\nvar _default = CoCreateAction;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-action/src/index.js\n")},"../CoCreate-api/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _src = __webpack_require__(/*! ../../../CoCreateJS/src */ "../../CoCreateJS/src/index.js");\n\nvar _src2 = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-action/src */ "../CoCreate-action/src/index.js"));\n\nvar _src3 = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-render/src */ "../CoCreate-render/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateApi = {\n  modules: {},\n  init: function ({\n    name,\n    module\n  }) {\n    this.register(name, module);\n  },\n  register: function (name, m_instance) {\n    const self = this;\n\n    if (typeof this.modules[name] === \'undefined\') {\n      this.modules[name] = m_instance;\n\n      _src.socketApi.listen(name, data => {\n        self.__responseProcess(name, data);\n      }); //. register actions\n\n\n      if (Array.isArray(m_instance[\'actions\'])) {\n        m_instance[\'actions\'].forEach(action => {\n          if (typeof m_instance[`action_${action}`] !== \'function\') {\n            m_instance[`action_${action}`] = function (element) {\n              self.__commonAction(m_instance.id, action, element);\n            };\n          }\n\n          _src2.default.init({\n            action: action,\n            endEvent: action,\n            callback: btn => {\n              m_instance[`action_${action}`](btn);\n            }\n          });\n        });\n      }\n    }\n  },\n  __responseProcess: function (m_name, data) {\n    const {\n      type,\n      response\n    } = data;\n    const m_instance = this.modules[m_name];\n\n    if (type && response && m_instance) {\n      if (typeof m_instance[`render_${type}`] === \'function\') {\n        m_instance[`render_${type}`](response);\n      }\n\n      this.render(type, response);\n      document.dispatchEvent(new CustomEvent(type, {\n        detail: {\n          data: response\n        }\n      }));\n    }\n  },\n  __commonAction: function (id, action, element) {\n    const container = element.closest("form") || document;\n    let data = CoCreateApi.getFormData(id, action, container);\n    CoCreateApi.send(id, action, data);\n  },\n  getFormData: function (m_name, action, container) {\n    const mainAttr = `data-${m_name}`;\n    const self = this;\n    const elements = container.querySelectorAll(`[${mainAttr}^="${action}."]`);\n    let data = {};\n    elements.forEach(element => {\n      let name = element.getAttribute(mainAttr);\n      let array_name = element.getAttribute(mainAttr + "_array");\n\n      let value = self.__getElValue(element);\n\n      if (!name) return;\n\n      if (action) {\n        let re = new RegExp(`^${action}.`, \'i\');\n\n        if (re.test(name)) {\n          name = name.replace(re, "");\n        } else {\n          return;\n        }\n      }\n\n      if (array_name) {\n        if (!data[name]) {\n          data[name] = [];\n        }\n\n        data[name].push(self.getFormData(m_name, array_name, element));\n      } else if (value != null) {\n        data[name] = value;\n      }\n    });\n    let keys = Object.keys(data);\n    let objectData = {};\n    keys.forEach(k => {\n      if (k.split(\'.\').length > 1) {\n        let newData = self.__createObject(data[k], k);\n\n        delete data[k];\n        objectData = self.__mergeObject(objectData, newData);\n      } else {\n        objectData[k] = data[k];\n      }\n    });\n    return objectData;\n  },\n  __getElValue: function (element) {\n    let value = null;\n\n    if (typeof element.value !== "undefined") {\n      switch (element.type.toLocaleLowerCase()) {\n        case \'checkbox\':\n          if (element.checked) {\n            value = element.value;\n          }\n\n          break;\n\n        default:\n          value = element.value;\n          break;\n      }\n    } else {\n      value = element.getAttribute(\'value\');\n\n      if (!value) {\n        value = element.innerHTML;\n      }\n    }\n\n    return value;\n  },\n  __mergeObject: function (target, source) {\n    target = target || {};\n\n    for (let key of Object.keys(source)) {\n      if (source[key] instanceof Object) {\n        Object.assign(source[key], this.__mergeObject(target[key], source[key]));\n      }\n    }\n\n    Object.assign(target || {}, source);\n    return target;\n  },\n  __createObject: function (data, path) {\n    if (!path) return data;\n    let keys = path.split(\'.\');\n    let newObject = data;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      newObject = {\n        [keys[i]]: newObject\n      };\n    }\n\n    return newObject;\n  },\n  send: function (module, action, data) {\n    let request_data = this.getCommonParamsExtend(data || {});\n    request_data = { ...request_data,\n      data\n    };\n\n    _src.socketApi.send(module, {\n      type: action,\n      data: request_data\n    });\n  },\n  render: function (action, data) {\n    _src3.default.data({\n      selector: `[data-template_id="${action}"]`,\n      data: data\n    });\n  },\n  createApiSocket: function (host, namespace) {\n    if (namespace) {\n      _src.socketApi.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n\n      _src.socketApi.setGlobalScope(namespace);\n    } else {\n      _src.socketApi.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  getCommonParamsExtend: function (info) {\n    return {\n      "apiKey": info.apiKey || config.apiKey,\n      "securityKey": info.securityKey || config.securityKey,\n      "organization_id": info.organization_id || config.organization_Id\n    };\n  }\n};\nCoCreateApi.createApiSocket(window.config.host ? window.config.host : \'server.cocreate.app\', window.config.organization_Id // window.config.apiKey\n// window.config.securityKey\n);\nvar _default = CoCreateApi;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-api/src/index.js\n')},"./src/index.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{eval("\n\nvar _src = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-api/src */ \"../CoCreate-api/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateRenderKey = {\n  id: 'key',\n  actions: ['renderKey'],\n  action_renderKey: function (element) {\n    const container = element.closest(\"form\") || document;\n    let data = CoCreate.api.getFormData(this.id, 'renderKey', container);\n    console.log(data);\n    CoCreate.api.render('renderKey', {\n      data: data\n    });\n  }\n};\n\n_src.default.init({\n  name: CoCreateRenderKey.id,\n  module: CoCreateRenderKey\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5yZW5kZXIta2V5Ly4vc3JjL2luZGV4LmpzP2I2MzUiXSwibmFtZXMiOlsiQ29DcmVhdGVSZW5kZXJLZXkiLCJpZCIsImFjdGlvbnMiLCJhY3Rpb25fcmVuZGVyS2V5IiwiZWxlbWVudCIsImNvbnRhaW5lciIsImNsb3Nlc3QiLCJkb2N1bWVudCIsImRhdGEiLCJDb0NyZWF0ZSIsImFwaSIsImdldEZvcm1EYXRhIiwiY29uc29sZSIsImxvZyIsInJlbmRlciIsIkNvQ3JlYXRlQXBpIiwiaW5pdCIsIm5hbWUiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFFQSxNQUFNQSxpQkFBaUIsR0FBRztBQUN6QkMsSUFBRSxFQUFFLEtBRHFCO0FBRXpCQyxTQUFPLEVBQUUsQ0FDUixXQURRLENBRmdCO0FBTXpCQyxrQkFBZ0IsRUFBRSxVQUFTQyxPQUFULEVBQWtCO0FBQ25DLFVBQU1DLFNBQVMsR0FBR0QsT0FBTyxDQUFDRSxPQUFSLENBQWdCLE1BQWhCLEtBQTJCQyxRQUE3QztBQUNBLFFBQUlDLElBQUksR0FBR0MsUUFBUSxDQUFDQyxHQUFULENBQWFDLFdBQWIsQ0FBeUIsS0FBS1YsRUFBOUIsRUFBa0MsV0FBbEMsRUFBZ0RJLFNBQWhELENBQVg7QUFDQU8sV0FBTyxDQUFDQyxHQUFSLENBQVlMLElBQVo7QUFDQUMsWUFBUSxDQUFDQyxHQUFULENBQWFJLE1BQWIsQ0FBb0IsV0FBcEIsRUFBaUM7QUFBQ04sVUFBSSxFQUFFQTtBQUFQLEtBQWpDO0FBQ0E7QUFYd0IsQ0FBMUI7O0FBZUFPLGFBQVlDLElBQVosQ0FBaUI7QUFDaEJDLE1BQUksRUFBRWpCLGlCQUFpQixDQUFDQyxFQURSO0FBRWhCaUIsUUFBTSxFQUFFbEI7QUFGUSxDQUFqQiIsImZpbGUiOiIuL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb0NyZWF0ZUFwaSBmcm9tICcuLi8uLi9Db0NyZWF0ZS1hcGkvc3JjJ1xuXG5jb25zdCBDb0NyZWF0ZVJlbmRlcktleSA9IHtcblx0aWQ6ICdrZXknLFxuXHRhY3Rpb25zOiBbXG5cdFx0J3JlbmRlcktleSdcblx0XSxcblx0XG5cdGFjdGlvbl9yZW5kZXJLZXk6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRjb25zdCBjb250YWluZXIgPSBlbGVtZW50LmNsb3Nlc3QoXCJmb3JtXCIpIHx8IGRvY3VtZW50O1xuXHRcdGxldCBkYXRhID0gQ29DcmVhdGUuYXBpLmdldEZvcm1EYXRhKHRoaXMuaWQsICdyZW5kZXJLZXknLCAgY29udGFpbmVyKTtcblx0XHRjb25zb2xlLmxvZyhkYXRhKVxuXHRcdENvQ3JlYXRlLmFwaS5yZW5kZXIoJ3JlbmRlcktleScsIHtkYXRhOiBkYXRhfSk7XG5cdH1cbn1cblxuXG5Db0NyZWF0ZUFwaS5pbml0KHtcblx0bmFtZTogQ29DcmVhdGVSZW5kZXJLZXkuaWQsXG5cdG1vZHVsZTogQ29DcmVhdGVSZW5kZXJLZXlcbn0pIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n")},"../CoCreate-render/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\n/**\n * change name Class\n * add functionality to add value on any attr of each elements into template\n */\nconst CoCreateRender = {\n  __getValueFromObject: function (json, path) {\n    try {\n      if (typeof json == 'undefined' || !path) return false;\n      let jsonData = json,\n          subpath = path.split('.');\n\n      for (let i = 0; i < subpath.length; i++) {\n        jsonData = jsonData[subpath[i]];\n        if (!jsonData) return false;\n      }\n\n      return jsonData;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __getValue: function (data, attrValue) {\n    let result = /{{\\s*([\\w\\W]+)\\s*}}/g.exec(attrValue);\n\n    if (result) {\n      return this.__getValueFromObject(data, result[1].trim());\n    }\n\n    return false;\n  },\n  __createObject: function (data, path) {\n    try {\n      if (!path) return data;\n      let keys = path.split('.');\n      let newObject = data;\n\n      for (var i = keys.length - 1; i >= 0; i--) {\n        newObject = {\n          [keys[i]]: newObject\n        };\n      }\n\n      return newObject;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __replaceValue: function (data, inputValue) {\n    let isPass = false;\n    let self = this;\n    let resultValue = null; // let variables = inputValue.match(/{{\\s*(\\S+)\\s*}}/g);\n\n    let variables = inputValue.match(/{{([A-Za-z0-9_.,\\- ]*)}}/g);\n\n    if (variables) {\n      variables.forEach(attr => {\n        let value = self.__getValue(data, attr);\n\n        if (value && typeof value !== \"object\") {\n          isPass = true;\n          inputValue = inputValue.replace(attr, value);\n        }\n      });\n\n      if (isPass) {\n        resultValue = inputValue;\n      }\n    }\n\n    return resultValue;\n  },\n  setArray: function (template, data) {\n    const type = template.getAttribute('data-render_array') || \"data\";\n    const render_key = template.getAttribute('data-render_key') || type;\n    const self = this;\n\n    const arrayData = this.__getValueFromObject(data, type);\n\n    if (type && Array.isArray(arrayData)) {\n      arrayData.forEach((item, index) => {\n        let cloneEl = template.cloneNode(true);\n        cloneEl.classList.remove('template');\n        cloneEl.classList.add('clone_' + type);\n\n        if (typeof item !== 'object') {\n          item = {\n            \"--\": item\n          };\n        } else {\n          item['index'] = index;\n        }\n\n        let r_data = self.__createObject(item, render_key);\n\n        self.setValue([cloneEl], r_data);\n        template.insertAdjacentHTML('beforebegin', cloneEl.outerHTML);\n      });\n    }\n  },\n  setValue: function (els, data, passTo, template) {\n    if (!data) return;\n    const that = this;\n    Array.from(els).forEach(e => {\n      let passId = e.getAttribute('data-pass_id');\n\n      if (passTo && passId != passTo) {\n        return;\n      }\n\n      Array.from(e.attributes).forEach(attr => {\n        let attr_name = attr.name.toLowerCase();\n        let isPass = false;\n        let attrValue = attr.value;\n        attrValue = that.__replaceValue(data, attrValue);\n\n        if (attrValue) {\n          if (attr_name == 'value') {\n            let tag = e.tagName.toLowerCase();\n\n            switch (tag) {\n              case 'input':\n                e.setAttribute(attr_name, attrValue);\n                break;\n\n              case 'textarea':\n                e.setAttribute(attr_name, attrValue);\n                e.textContent = attrValue;\n                break;\n\n              default:\n                if (e.children.length === 0) {\n                  e.innerHTML = attrValue;\n                }\n\n            }\n          }\n\n          e.setAttribute(attr_name, attrValue);\n        }\n      });\n\n      if (e.children.length == 0 && e.textContent) {\n        let textContent = e.textContent;\n        textContent = that.__replaceValue(data, textContent);\n\n        if (textContent) {\n          e.textContent = textContent;\n        }\n      }\n\n      if (e.children.length > 0) {\n        that.setValue(e.children, data);\n\n        if (e.classList.contains('template')) {\n          that.setArray(e, data);\n        }\n      }\n    });\n  },\n  data: function ({\n    selector,\n    data,\n    elements,\n    passTo\n  }) {\n    if (selector) {\n      this.render(selector, data);\n    } else if (elements) {\n      this.setValue(elements, data, passTo);\n    }\n  },\n  render: function (selector, dataResult) {\n    let template_div = document.querySelector(selector);\n\n    if (!template_div) {\n      return;\n    }\n\n    if (Array.isArray(dataResult)) {\n      template_div.setAttribute('data-render_array', 'test');\n      this.setValue([template_div], {\n        test: dataResult\n      });\n    } else {\n      this.setValue(template_div.children, dataResult);\n    }\n  }\n};\nvar _default = CoCreateRender;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-render/src/index.js\n")},"../../CoCreateJS/src/common-fun.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getCommonParams = getCommonParams;\nexports.getCommonParamsExtend = getCommonParamsExtend;\nexports.generateSocketClient = generateSocketClient;\n\nfunction getCommonParams() {\n  return {\n    "apiKey": config.apiKey,\n    "securityKey": config.securityKey,\n    "organization_id": config.organization_Id\n  };\n}\n\nfunction getCommonParamsExtend(info) {\n  return {\n    "apiKey": info.apiKey || config.apiKey,\n    "securityKey": info.securityKey || config.securityKey,\n    "organization_id": info.organization_id || config.organization_Id\n  };\n}\n\nfunction generateSocketClient(namespace, room) {\n  let ns = namespace || config.organization_Id;\n  let rr = room || \'\';\n\n  if (rr) {\n    return `${ns}/${rr}`;\n  } else {\n    return ns;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5yZW5kZXIta2V5Ly4uL0NvQ3JlYXRlSlMvc3JjL2NvbW1vbi1mdW4uanM/Yjg5ZiJdLCJuYW1lcyI6WyJnZXRDb21tb25QYXJhbXMiLCJjb25maWciLCJhcGlLZXkiLCJzZWN1cml0eUtleSIsIm9yZ2FuaXphdGlvbl9JZCIsImdldENvbW1vblBhcmFtc0V4dGVuZCIsImluZm8iLCJvcmdhbml6YXRpb25faWQiLCJnZW5lcmF0ZVNvY2tldENsaWVudCIsIm5hbWVzcGFjZSIsInJvb20iLCJucyIsInJyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxTQUFTQSxlQUFULEdBQ0E7QUFDRSxTQUFPO0FBQ0wsY0FBb0JDLE1BQU0sQ0FBQ0MsTUFEdEI7QUFFTCxtQkFBb0JELE1BQU0sQ0FBQ0UsV0FGdEI7QUFHTCx1QkFBb0JGLE1BQU0sQ0FBQ0c7QUFIdEIsR0FBUDtBQUtEOztBQUVELFNBQVNDLHFCQUFULENBQStCQyxJQUEvQixFQUNBO0FBQ0UsU0FBTztBQUNMLGNBQW9CQSxJQUFJLENBQUNKLE1BQUwsSUFBZUQsTUFBTSxDQUFDQyxNQURyQztBQUVMLG1CQUFvQkksSUFBSSxDQUFDSCxXQUFMLElBQW9CRixNQUFNLENBQUNFLFdBRjFDO0FBR0wsdUJBQW9CRyxJQUFJLENBQUNDLGVBQUwsSUFBd0JOLE1BQU0sQ0FBQ0c7QUFIOUMsR0FBUDtBQUtEOztBQUVELFNBQVNJLG9CQUFULENBQStCQyxTQUEvQixFQUEwQ0MsSUFBMUMsRUFDQTtBQUNFLE1BQUlDLEVBQUUsR0FBR0YsU0FBUyxJQUFJUixNQUFNLENBQUNHLGVBQTdCO0FBQ0EsTUFBSVEsRUFBRSxHQUFHRixJQUFJLElBQUksRUFBakI7O0FBQ0EsTUFBSUUsRUFBSixFQUFRO0FBQ04sV0FBUSxHQUFFRCxFQUFHLElBQUdDLEVBQUcsRUFBbkI7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPRCxFQUFQO0FBQ0Q7QUFDRiIsImZpbGUiOiIuLi8uLi9Db0NyZWF0ZUpTL3NyYy9jb21tb24tZnVuLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0Q29tbW9uUGFyYW1zKCkgXG57XG4gIHJldHVybiB7XG4gICAgXCJhcGlLZXlcIjogICAgICAgICAgIGNvbmZpZy5hcGlLZXksXG4gICAgXCJzZWN1cml0eUtleVwiOiAgICAgIGNvbmZpZy5zZWN1cml0eUtleSxcbiAgICBcIm9yZ2FuaXphdGlvbl9pZFwiOiAgY29uZmlnLm9yZ2FuaXphdGlvbl9JZCxcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDb21tb25QYXJhbXNFeHRlbmQoaW5mbykgXG57XG4gIHJldHVybiB7XG4gICAgXCJhcGlLZXlcIjogICAgICAgICAgIGluZm8uYXBpS2V5IHx8IGNvbmZpZy5hcGlLZXksXG4gICAgXCJzZWN1cml0eUtleVwiOiAgICAgIGluZm8uc2VjdXJpdHlLZXkgfHwgY29uZmlnLnNlY3VyaXR5S2V5LFxuICAgIFwib3JnYW5pemF0aW9uX2lkXCI6ICBpbmZvLm9yZ2FuaXphdGlvbl9pZCB8fCBjb25maWcub3JnYW5pemF0aW9uX0lkLFxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU29ja2V0Q2xpZW50IChuYW1lc3BhY2UsIHJvb20pIFxue1xuICBsZXQgbnMgPSBuYW1lc3BhY2UgfHwgY29uZmlnLm9yZ2FuaXphdGlvbl9JZFxuICBsZXQgcnIgPSByb29tIHx8ICcnO1xuICBpZiAocnIpIHtcbiAgICByZXR1cm4gYCR7bnN9LyR7cnJ9YFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBucztcbiAgfVxufVxuXG5leHBvcnQge2dldENvbW1vblBhcmFtcywgZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kLCBnZW5lcmF0ZVNvY2tldENsaWVudH07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/common-fun.js\n')},"../../CoCreateJS/src/core.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = core;\n// ***********   define variables end ***************** /// \nconst CoCreateCore = {\n  socketInitFuncs: [],\n  moduleSelectors: [],\n  socket: null,\n  host: 'server.cocreate.app',\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n  init: function (host, namespace) {\n    if (host) {\n      this.host = host;\n    }\n\n    this.__setConfig();\n\n    this.createGeneralSocket(host, namespace || config.organization_Id);\n    this.initSocketListener();\n    this.createUserSocket(host);\n  },\n  __setConfig: function () {\n    let orgId = window.localStorage.getItem('organization_id');\n    let securityKey = window.localStorage.getItem('securityKey');\n    let apiKey = window.localStorage.getItem('apiKey');\n    if (orgId) config['organization_Id'] = orgId;\n    if (apiKey) config['apiKey'] = apiKey;\n    if (securityKey) config['securityKey'] = securityKey;\n  },\n  initSocketListener: function () {\n    const self = this;\n    this.socket.listen('connect', function (data, room) {\n      if (room == self.socket.getGlobalScope()) {\n        self.socketInitFuncs.forEach(func => {\n          func.initFunc.call(func.instance);\n        });\n      }\n    });\n    this.socket.listen('readDocument', function (data) {\n      const metadata = data.metadata; // if (metadata && metadata.type == 'crdt') {\n      //   self.initRenderCrdtData(data);\n      // } else {\n      //   // self.renderModules(data)\n      // }\n\n      return data;\n    });\n    this.socket.listen('updateDocument', function (data) {// self.renderModules(data)\n    });\n    this.socket.listen('deletedDocument', function (data) {\n      console.log(data);\n    });\n    this.socket.listen('sendMessage', function (data) {\n      console.log(data);\n    });\n    this.listenMessage('downloadFileInfo', function (data) {\n      self.socket.saveFileName = data.file_name;\n    });\n  },\n  createUserSocket: function (host) {\n    var user_id = window.localStorage.getItem('user_id');\n\n    if (user_id) {\n      this.socket.create({\n        namespace: 'users',\n        room: user_id,\n        host: host\n      });\n    }\n  },\n  createGeneralSocket: function (host, namespace) {\n    if (namespace) {\n      this.socket.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      this.socket.setGlobalScope(namespace);\n    } else {\n      this.socket.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  registerInit: function (initFunc, instance) {\n    this.socketInitFuncs.push({\n      initFunc,\n      instance: instance || window\n    });\n  },\n  // registerSelector: function(selector) {\n  //   if (this.moduleSelectors.indexOf(selector) === -1) {\n  //     this.moduleSelectors.push(selector);\n  //   }\n  // },\n  // getSelectors: function(selector) {\n  //   return this.moduleSelectors.join(\",\");\n  // },\n  listenMessage: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  createSocket: function (config) {\n    this.socket.create(config);\n  },\n  destroySocket: function (config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.socket.getKey(namespace, room);\n    let socket = this.socket.sockets.get(key);\n\n    if (!socket) {\n      return;\n    }\n\n    this.socket.destroy(socket, key);\n  }\n};\n\nfunction core(socket) {\n  CoCreateCore.setSocket(socket);\n  return CoCreateCore;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/core.js\n")},"../../CoCreateJS/src/crud.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = CRUD;\n\nvar _commonFun = __webpack_require__(/*! ./common-fun.js */ \"../../CoCreateJS/src/common-fun.js\");\n\nvar _utilsCrud = _interopRequireDefault(__webpack_require__(/*! ./utils.crud.js */ \"../../CoCreateJS/src/utils.crud.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// ***********   define variables end ***************** /// \n// var data = {\n//   \"org_id\": \"xxx\",\n//   \"customer.name\": \"Jin\",\n//   \"customer.fristname\": \"Jin\",\n//   \"customer.lastname\": \"CF\",\n//   \"customer.address.line1\": \"line1\",\n//   \"customer.address.line2\": \"line2\",\n//   'scope[0]': 'testing',\n//   'scope[1]': '---',\n//   \"customer.orders[0]\": 123,\n//   \"customer.orders[1]\": 243,\n// }\n// var obj = {\n//   test: {\n//     \"name\": '123',\n//     \"address\": 'address',\n//     \"customer\": {\n//       \"name\": 'tttt'\n//     },\n//     \"orders\": [1,2,3]\n//   }\n// }\n// console.log('----- convert object -----')\n// console.log(utilsCrud.decodeObject(data));\n// console.log(utilsCrud.encodeObject(obj));\nconst CoCreateCRUD = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n   \n    CoCreate.crud.readDcoumentList {\n      collection: \"modules\",\n      element: \"xxxx\",\n      metadata: \"\",\n      operator: {\n        fetch: {\n          name: 'xxxx',\n          value: 'xxxxx'\n        },\n        filters: [{\n          name: 'field1',\n          operator: \"contain | range | eq | ne | lt | lte | gt | gte | in | nin\",\n          value: [v1, v2, ...]\n        }, {\n          name: \"_id\",\n          opreator: \"in\",\n          value: [\"id1\"]\n        }, {\n          ....\n        }],\n        orders: [{\n          name: 'field-x',\n          type: 1 | -1\n        }],\n        search: {\n          type: 'or | and',\n          value: [value1, value2]\n        },\n        \n        startIndex: 0 (integer),\n        count: 0 (integer)\n      },\n      \n      is_collection: true | false,\n      //. case fetch document case\n      created_ids : [id1, id2, ...],\n      \n      \n      -------- additional response data -----------\n      data: [] // array\n    }\n  */\n  readDocumentList(info) {\n    if (!info) return;\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!info.collection || !info.operator) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...info\n    };\n    this.socket.send('readDocumentList', request_data);\n  },\n\n  /*\n  CoCreate.crud.createDocument({\n    namespace:'',\n    room:'',\n    broadcast: true/false, (default=ture)\n    broadcast_sender: true/false, (default=true) \n    \n    collection: \"test123\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  // data param needs organization_id field added to pass security check\n  createDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let commonData = (0, _commonFun.getCommonParamsExtend)(info);\n    let request_data = { ...info,\n      ...commonData\n    };\n    let data = info.data || {};\n\n    if (!data['organization_id']) {\n      data['organization_id'] = config.organization_Id;\n    }\n\n    if (info['data']) {\n      data = { ...data,\n        ...info['data']\n      };\n    } //. rebuild data\n\n\n    request_data['data'] = data;\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('createDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.updateDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"test123\",\n    document_id: \"document_id\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    delete_fields:[\"name3\", \"name4\"],\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  updateDocument: function (info) {\n    if (!info || !info['document_id']) return;\n    let commonData = (0, _commonFun.getCommonParamsExtend)(info);\n    let request_data = { ...info,\n      ...commonData\n    };\n\n    if (typeof info['data'] === 'object') {\n      request_data['set'] = info['data'];\n    }\n\n    if (Array.isArray(info['delete_fields'])) request_data['unset'] = info['delete_fields'];\n    if (!request_data['set'] && !request_data['unset']) return;\n\n    if (info.broadcast === false) {\n      request_data['broadcast'] = false;\n    }\n    /** socket parameters **/\n\n\n    if (info['broadcast_sender'] === undefined) {\n      request_data['broadcast_sender'] = true;\n    }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('updateDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.readDocument({\n    collection: \"test123\",\n    document_id: \"document_id\",\n    element: “xxxx”,\n    metaData: \"xxxx\",\n    exclude_fields: [] \n  }),\n  */\n  readDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let commonData = (0, _commonFun.getCommonParams)();\n    let request_data = { ...info,\n      ...commonData\n    };\n    this.socket.send('readDocument', request_data);\n  },\n\n  /*\n  CoCreate.crud.deleteDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"module\",\n    document_id: \"\",\n    element: “xxxx”,\n    metadata: \"xxxx\"\n  }),\n  */\n  deleteDocument: function (info) {\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let commonData = (0, _commonFun.getCommonParams)();\n    let request_data = { ...info,\n      ...commonData\n    };\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('deleteDocument', request_data, room);\n  },\n\n  /** export / import db functions **/\n\n  /*\n  readDocument({\n   collection: \"test123\",\n   element: “xxxx”,\n   metaData: \"xxxx\",\n  }),\n  */\n  exportCollection: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['export_type'] = info['export_type'];\n    request_data['metadata'] = info['metadata'];\n    this.socket.send('exportDB', request_data);\n  },\n\n  /*\n  readDocument({\n    collection: \"test123\",\n    file: file\n  }),\n  */\n  importCollection: function (info) {\n    const {\n      file\n    } = info;\n\n    if (info === null || !(file instanceof File)) {\n      return;\n    }\n\n    const extension = file.name.split(\".\").pop();\n\n    if (!['json', 'csv'].some(item => item === extension)) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['import_type'] = extension;\n    this.socket.send('importDB', request_data);\n    this.socket.sendFile(file);\n  },\n  //. message listener\n  listenMessage: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  listenerReadDocument: function (fun) {\n    this.socket.listen(\"readDocument\", fun);\n  },\n  listenerCreateDocument: function (fun) {\n    this.socket.listen(\"createDocument\", fun);\n  },\n  listenerDeleteDocument: function (fun) {\n    this.socket.listen(\"deleteDocument\", fun);\n  },\n  listenerUpdateDocument: function (fun) {\n    this.socket.listen(\"updateDocument\", fun);\n  },\n  listenerReadDocumentList: function (fun) {\n    this.socket.listen(\"readDocumentList\", fun);\n  }\n};\n\nfunction CRUD(socket) {\n  CoCreateCRUD.setSocket(socket);\n  return CoCreateCRUD;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/crud.js\n")},"../../CoCreateJS/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.addComponent = addComponent;\nexports.removeComponent = removeComponent;\nexports.utils = exports.message = exports.crud = exports.socketApi = exports.socket = exports.core = void 0;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! ./socket.js */ "../../CoCreateJS/src/socket.js"));\n\nvar _crud = _interopRequireDefault(__webpack_require__(/*! ./crud.js */ "../../CoCreateJS/src/crud.js"));\n\nvar _core = _interopRequireDefault(__webpack_require__(/*! ./core.js */ "../../CoCreateJS/src/core.js"));\n\nvar utils = _interopRequireWildcard(__webpack_require__(/*! ./utils.js */ "../../CoCreateJS/src/utils.js"));\n\nexports.utils = utils;\n\nvar _message = _interopRequireDefault(__webpack_require__(/*! ./message.js */ "../../CoCreateJS/src/message.js"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global window*/\n// import CRDT from "./crdt.js"\nlet socket = new _socket.default(\'ws\');\nexports.socket = socket;\nlet socketApi = new _socket.default(\'api\');\nexports.socketApi = socketApi;\nlet core = (0, _core.default)(socket);\nexports.core = core;\nlet crud = (0, _crud.default)(socket);\nexports.crud = crud;\nlet message = (0, _message.default)(socket);\nexports.message = message;\ncore.init(window.config.host ? window.config.host : \'server.cocreate.app\');\n\nfunction addComponent(key, component) {\n  this[key] = component;\n}\n\nfunction removeComponent(key) {\n  if (this[key]) {}\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5yZW5kZXIta2V5Ly4uL0NvQ3JlYXRlSlMvc3JjL2luZGV4LmpzPzI4OWEiXSwibmFtZXMiOlsic29ja2V0IiwiQ29DcmVhdGVTb2NrZXQiLCJzb2NrZXRBcGkiLCJjb3JlIiwiY3J1ZCIsIm1lc3NhZ2UiLCJpbml0Iiwid2luZG93IiwiY29uZmlnIiwiaG9zdCIsImFkZENvbXBvbmVudCIsImtleSIsImNvbXBvbmVudCIsInJlbW92ZUNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7QUFMQTtBQU9BO0FBQ0EsSUFBSUEsTUFBTSxHQUFHLElBQUlDLGVBQUosQ0FBbUIsSUFBbkIsQ0FBYjs7QUFDQSxJQUFJQyxTQUFTLEdBQUcsSUFBSUQsZUFBSixDQUFtQixLQUFuQixDQUFoQjs7QUFFQSxJQUFJRSxJQUFJLEdBQUcsbUJBQUtILE1BQUwsQ0FBWDs7QUFDQSxJQUFJSSxJQUFJLEdBQUcsbUJBQUtKLE1BQUwsQ0FBWDs7QUFDQSxJQUFJSyxPQUFPLEdBQUcsc0JBQVFMLE1BQVIsQ0FBZDs7QUFFQUcsSUFBSSxDQUFDRyxJQUFMLENBQVVDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxJQUFkLEdBQXFCRixNQUFNLENBQUNDLE1BQVAsQ0FBY0MsSUFBbkMsR0FBMEMscUJBQXBEOztBQUVBLFNBQVNDLFlBQVQsQ0FBc0JDLEdBQXRCLEVBQTJCQyxTQUEzQixFQUFzQztBQUNsQyxPQUFLRCxHQUFMLElBQVlDLFNBQVo7QUFDSDs7QUFFRCxTQUFTQyxlQUFULENBQXlCRixHQUF6QixFQUE4QjtBQUMxQixNQUFJLEtBQUtBLEdBQUwsQ0FBSixFQUFlLENBRWQ7QUFDSiIsImZpbGUiOiIuLi8uLi9Db0NyZWF0ZUpTL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIHdpbmRvdyovXG5pbXBvcnQgQ29DcmVhdGVTb2NrZXQgZnJvbSBcIi4vc29ja2V0LmpzXCJcbmltcG9ydCBDUlVEIGZyb20gXCIuL2NydWQuanNcIlxuaW1wb3J0IENvcmUgZnJvbSBcIi4vY29yZS5qc1wiXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi91dGlscy5qc1wiXG5pbXBvcnQgTWVzc2FnZSBmcm9tIFwiLi9tZXNzYWdlLmpzXCJcblxuLy8gaW1wb3J0IENSRFQgZnJvbSBcIi4vY3JkdC5qc1wiXG5sZXQgc29ja2V0ID0gbmV3IENvQ3JlYXRlU29ja2V0KCd3cycpO1xubGV0IHNvY2tldEFwaSA9IG5ldyBDb0NyZWF0ZVNvY2tldCgnYXBpJyk7XG5cbmxldCBjb3JlID0gQ29yZShzb2NrZXQpXG5sZXQgY3J1ZCA9IENSVUQoc29ja2V0KVxubGV0IG1lc3NhZ2UgPSBNZXNzYWdlKHNvY2tldClcblxuY29yZS5pbml0KHdpbmRvdy5jb25maWcuaG9zdCA/IHdpbmRvdy5jb25maWcuaG9zdCA6ICdzZXJ2ZXIuY29jcmVhdGUuYXBwJyk7XG5cbmZ1bmN0aW9uIGFkZENvbXBvbmVudChrZXksIGNvbXBvbmVudCkge1xuICAgIHRoaXNba2V5XSA9IGNvbXBvbmVudDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ29tcG9uZW50KGtleSkge1xuICAgIGlmICh0aGlzW2tleV0pIHtcblxuICAgIH1cbn1cblxuZXhwb3J0IHtcbiAgICBjb3JlLFxuICAgIHNvY2tldCxcbiAgICBzb2NrZXRBcGksXG4gICAgY3J1ZCxcbiAgICB1dGlscyxcbiAgICBtZXNzYWdlLFxuICAgIGFkZENvbXBvbmVudCxcbiAgICByZW1vdmVDb21wb25lbnRcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/index.js\n')},"../../CoCreateJS/src/message.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = Message;\n\nvar _commonFun = __webpack_require__(/*! ./common-fun.js */ \"../../CoCreateJS/src/common-fun.js\");\n\nconst CoCreateMessage = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n  CoCreate.message.send({\n     namespace: '',\n     room: '',\n     broadcast: true/false,\n     broadcast_sender: true/false\n     \n     rooms: [r1, r2],\n     emit: {\n       message': 'nice game',\n       data': 'let's play a game ....'\n     }\n   })\n  */\n  send: function (data) {\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!data || !data.emit) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...data\n    };\n    /** socket parameters **/\n    // if (data['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (data['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(data.namespace, data.room);\n    this.socket.send('sendMessage', request_data, room);\n  },\n  receive: function (message, fun) {\n    this.socket.listen(message, fun);\n  }\n};\n\nfunction Message(socket) {\n  CoCreateMessage.setSocket(socket);\n  return CoCreateMessage;\n}\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5yZW5kZXIta2V5Ly4uL0NvQ3JlYXRlSlMvc3JjL21lc3NhZ2UuanM/Nzg0MiJdLCJuYW1lcyI6WyJDb0NyZWF0ZU1lc3NhZ2UiLCJzb2NrZXQiLCJzZXRTb2NrZXQiLCJzZW5kIiwiZGF0YSIsInJlcXVlc3RfZGF0YSIsImVtaXQiLCJyb29tIiwibmFtZXNwYWNlIiwicmVjZWl2ZSIsIm1lc3NhZ2UiLCJmdW4iLCJsaXN0ZW4iLCJNZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUEsTUFBTUEsZUFBZSxHQUFHO0FBQ3RCQyxRQUFNLEVBQUUsSUFEYztBQUV0QkMsV0FBUyxFQUFFLFVBQVNELE1BQVQsRUFBaUI7QUFDMUIsU0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0QsR0FKcUI7O0FBS3ZCO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQ0UsTUFBSSxFQUFFLFVBQVNDLElBQVQsRUFBZTtBQUNsQixRQUFJQyxZQUFZLEdBQUcsaUNBQW5COztBQUVBLFFBQUksQ0FBQ0QsSUFBRCxJQUFTLENBQUNBLElBQUksQ0FBQ0UsSUFBbkIsRUFBeUI7QUFDdkI7QUFDRDs7QUFDREQsZ0JBQVksR0FBRyxFQUFDLEdBQUdBLFlBQUo7QUFBa0IsU0FBR0Q7QUFBckIsS0FBZjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFVBQU1HLElBQUksR0FBRyxxQ0FBcUJILElBQUksQ0FBQ0ksU0FBMUIsRUFBcUNKLElBQUksQ0FBQ0csSUFBMUMsQ0FBYjtBQUVBLFNBQUtOLE1BQUwsQ0FBWUUsSUFBWixDQUFpQixhQUFqQixFQUFnQ0UsWUFBaEMsRUFBOENFLElBQTlDO0FBQ0YsR0FyQ3NCO0FBdUN2QkUsU0FBTyxFQUFFLFVBQVNDLE9BQVQsRUFBa0JDLEdBQWxCLEVBQXVCO0FBQzlCLFNBQUtWLE1BQUwsQ0FBWVcsTUFBWixDQUFtQkYsT0FBbkIsRUFBNEJDLEdBQTVCO0FBQ0Q7QUF6Q3NCLENBQXhCOztBQTRDZSxTQUFTRSxPQUFULENBQWlCWixNQUFqQixFQUF5QjtBQUN0Q0QsaUJBQWUsQ0FBQ0UsU0FBaEIsQ0FBMEJELE1BQTFCO0FBQ0EsU0FBT0QsZUFBUDtBQUNEOztBQUFBIiwiZmlsZSI6Ii4uLy4uL0NvQ3JlYXRlSlMvc3JjL21lc3NhZ2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldENvbW1vblBhcmFtcywgZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kLCBnZW5lcmF0ZVNvY2tldENsaWVudH0gZnJvbSBcIi4vY29tbW9uLWZ1bi5qc1wiXG5cbmNvbnN0IENvQ3JlYXRlTWVzc2FnZSA9IHtcbiAgc29ja2V0OiBudWxsLFxuICBzZXRTb2NrZXQ6IGZ1bmN0aW9uKHNvY2tldCkge1xuICAgIHRoaXMuc29ja2V0ID0gc29ja2V0O1xuICB9LFxuIC8qXG4gQ29DcmVhdGUubWVzc2FnZS5zZW5kKHtcbiAgICBuYW1lc3BhY2U6ICcnLFxuICAgIHJvb206ICcnLFxuICAgIGJyb2FkY2FzdDogdHJ1ZS9mYWxzZSxcbiAgICBicm9hZGNhc3Rfc2VuZGVyOiB0cnVlL2ZhbHNlXG4gICAgXG4gICAgcm9vbXM6IFtyMSwgcjJdLFxuICAgIGVtaXQ6IHtcbiAgICAgIG1lc3NhZ2UnOiAnbmljZSBnYW1lJyxcbiAgICAgIGRhdGEnOiAnbGV0J3MgcGxheSBhIGdhbWUgLi4uLidcbiAgICB9XG4gIH0pXG4gKi9cbiBzZW5kOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgbGV0IHJlcXVlc3RfZGF0YSA9IGdldENvbW1vblBhcmFtcygpO1xuICAgIFxuICAgIGlmICghZGF0YSB8fCAhZGF0YS5lbWl0KSB7XG4gICAgICByZXR1cm47ICAgICBcbiAgICB9XG4gICAgcmVxdWVzdF9kYXRhID0gey4uLnJlcXVlc3RfZGF0YSwgLi4uZGF0YX1cbiAgICBcbiAgICAvKiogc29ja2V0IHBhcmFtZXRlcnMgKiovXG4gICAgLy8gaWYgKGRhdGFbJ2Jyb2FkY2FzdCddID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyAgIHJlcXVlc3RfZGF0YVsnYnJvYWRjYXN0J10gPSB0cnVlO1xuICAgIC8vIH1cbiAgICAvLyBpZiAoZGF0YVsnYnJvYWRjYXN0X3NlbmRlciddID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyAgIHJlcXVlc3RfZGF0YVsnYnJvYWRjYXN0X3NlbmRlciddID0gdHJ1ZTtcbiAgICAvLyB9XG4gICAgY29uc3Qgcm9vbSA9IGdlbmVyYXRlU29ja2V0Q2xpZW50KGRhdGEubmFtZXNwYWNlLCBkYXRhLnJvb20pO1xuICAgIFxuICAgIHRoaXMuc29ja2V0LnNlbmQoJ3NlbmRNZXNzYWdlJywgcmVxdWVzdF9kYXRhLCByb29tKVxuIH0sXG4gXG4gcmVjZWl2ZTogZnVuY3Rpb24obWVzc2FnZSwgZnVuKSB7XG4gICB0aGlzLnNvY2tldC5saXN0ZW4obWVzc2FnZSwgZnVuKTtcbiB9LFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNZXNzYWdlKHNvY2tldCkge1xuICBDb0NyZWF0ZU1lc3NhZ2Uuc2V0U29ja2V0KHNvY2tldClcbiAgcmV0dXJuIENvQ3JlYXRlTWVzc2FnZTtcbn07XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/message.js\n")},"../../CoCreateJS/src/socket.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nclass CoCreateSocket {\n  constructor(prefix = \"crud\") {\n    this.prefix = prefix || \"crud\";\n    this.sockets = new Map();\n    this.listeners = new Map();\n    this.messageQueue = new Map();\n    this.saveFileName = '';\n    this.globalScope = \"\";\n  }\n\n  setGlobalScope(scope) {\n    this.globalScope = `${this.prefix}/${scope}`;\n  }\n\n  getGlobalScope() {\n    return this.globalScope;\n  }\n  /**\n   * config: {namespace, room, host}\n   */\n\n\n  create(config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.getKey(namespace, room);\n\n    let _this = this;\n\n    let socket;\n\n    if (this.sockets.get(key)) {\n      socket = this.sockets.get(key);\n      console.log('SOcket already has been register');\n      return;\n    }\n\n    let w_protocol = window.location.protocol;\n\n    if (window.location.protocol === \"about:\") {\n      w_protocol = window.parent.location.protocol;\n    }\n\n    let protocol = w_protocol === 'http:' ? 'ws' : 'wss';\n    const port = config.port ? config.port : 8088;\n    let socket_url = `${protocol}://${window.location.host}:${port}/${key}`;\n\n    if (config.host) {\n      if (config.host.includes(\"://\")) {\n        socket_url = `${config.host}/${key}`;\n      } else {\n        socket_url = `${protocol}://${config.host}:${port}/${key}`;\n      }\n    }\n\n    socket = new WebSocket(socket_url);\n\n    socket.onopen = function (event) {\n      console.log('created socket: ' + key);\n      const messages = _this.messageQueue.get(key) || [];\n      console.log(messages);\n      messages.forEach(msg => socket.send(JSON.stringify(msg)));\n\n      _this.sockets.set(key, socket);\n\n      _this.messageQueue.set(key, []);\n    };\n\n    socket.onclose = function (event) {\n      switch (event.code) {\n        case 1000:\n          // close normal\n          console.log(\"websocket: closed\");\n          break;\n\n        default:\n          _this.destroy(socket, key);\n\n          _this.reconnect(socket, config);\n\n          break;\n      }\n    };\n\n    socket.onerror = function (err) {\n      console.log('Socket error');\n\n      _this.destroy(socket, key);\n\n      _this.reconnect(socket, config);\n    };\n\n    socket.onmessage = function (data) {\n      try {\n        if (data.data instanceof Blob) {\n          _this.saveFile(data.data);\n\n          return;\n        }\n\n        let rev_data = JSON.parse(data.data);\n\n        if (rev_data.data.event) {\n          var event = new CustomEvent(rev_data.data.event, {\n            detail: rev_data.data\n          });\n          document.dispatchEvent(event);\n          return;\n        }\n\n        let action = rev_data.action;\n\n        const listeners = _this.listeners.get(rev_data.action);\n\n        if (!listeners) {\n          return;\n        }\n\n        listeners.forEach(listener => {\n          listener(rev_data.data, key);\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }\n  /**\n   * \n   */\n\n\n  send(action, data, room) {\n    const obj = {\n      action: action,\n      data: data\n    };\n    const key = this.getKeyByRoom(room);\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(JSON.stringify(obj));\n    } else {\n      if (this.messageQueue.get(key)) {\n        this.messageQueue.get(key).push(obj);\n      } else {\n        this.messageQueue.set(key, [obj]);\n      }\n    }\n  }\n\n  sendFile(file, room) {\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(file);\n    }\n  }\n  /**\n   * scope: ns/room\n   */\n\n\n  listen(type, callback) {\n    if (!this.listeners.get(type)) {\n      this.listeners.set(type, [callback]);\n    } else {\n      this.listeners.get(type).push(callback);\n    }\n  }\n\n  reconnect(socket, config) {\n    let _this = this;\n\n    setTimeout(function () {\n      _this.create(config);\n    }, 1000);\n  }\n\n  destroy(socket, key) {\n    if (socket) {\n      socket.onerror = socket.onopen = socket.onclose = null;\n      socket.close();\n      socket = null;\n    }\n\n    if (this.sockets.get(key)) {\n      this.sockets.delete(key);\n    }\n  }\n\n  getKey(namespace, room) {\n    let key = `${this.prefix}`;\n\n    if (namespace && namespace != '') {\n      if (room && room != '') {\n        key += `/${namespace}/${room}`;\n      } else {\n        key += `/${namespace}`;\n      }\n    }\n\n    return key;\n  }\n\n  getByRoom(room) {\n    let key = this.getKeyByRoom(room);\n    return this.sockets.get(key);\n  }\n\n  getKeyByRoom(room) {\n    let key = this.globalScope;\n\n    if (room) {\n      key = `${this.prefix}/${room}`;\n    }\n\n    return key;\n  }\n\n  saveFile(blob) {\n    // const {filename} = window.saveFileInfo;\n    const file_name = this.saveFileName || 'downloadFile';\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style = \"display: none\";\n    let url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = file_name;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    this.saveFileName = '';\n  }\n\n  listenAsync(eventname) {\n    return new Promise(resolve => {\n      document.addEventListener(eventname, function (event) {\n        resolve(event.detail);\n      }, {\n        once: true\n      });\n    });\n  }\n\n}\n\nvar _default = CoCreateSocket;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/socket.js\n")},"../../CoCreateJS/src/utils.crud.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nfunction __mergeObject(target, source) {\n  target = target || {};\n\n  for (let key of Object.keys(source)) {\n    if (source[key] instanceof Object) {\n      Object.assign(source[key], __mergeObject(target[key], source[key]));\n    }\n  }\n\n  Object.assign(target || {}, source);\n  return target;\n}\n\nfunction __createObject(data, path) {\n  if (!path) return data;\n  let keys = path.split('.');\n  let newObject = data;\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    newObject = {\n      [keys[i]]: newObject\n    };\n  }\n\n  return newObject;\n}\n\nfunction __createArray(key, data) {\n  try {\n    let item = /([\\w\\W]+)\\[(\\d+)\\]/gm.exec(key);\n\n    if (item && item.length == 3) {\n      let arrayKey = item[1];\n      let index = parseInt(item[2]);\n\n      if (!data[arrayKey] || !Array.isArray(data[arrayKey])) {\n        data[arrayKey] = [];\n      }\n\n      data[arrayKey][index] = data[key];\n      delete data[key];\n      key = arrayKey;\n    }\n  } catch {\n    console.log('create array error');\n  }\n\n  return key;\n}\n\nfunction isObject(item) {\n  return !!item && item.constructor === Object;\n}\n\nfunction isArray(item) {\n  return !!item && item.constructor === Array;\n}\n\nfunction decodeObject(data) {\n  let keys = Object.keys(data);\n  let objectData = {};\n  keys.forEach(k => {\n    k = __createArray(k, data);\n\n    if (k.split('.').length > 1) {\n      let newData = __createObject(data[k], k);\n\n      delete data[k];\n      objectData = __mergeObject(objectData, newData);\n    } else {\n      objectData[k] = data[k];\n    }\n  });\n  return objectData;\n}\n\nfunction encodeObject(data) {\n  let keys = Object.keys(data);\n  let newData = {};\n  keys.forEach(k => {\n    let data_value = data[k];\n\n    if (isObject(data[k])) {\n      let new_obj = encodeObject(data[k]);\n      let newKeys = Object.keys(new_obj);\n      newKeys.forEach(newKey => {\n        let value = new_obj[newKey];\n        newKey = k + \".\" + newKey;\n        newData[newKey] = value;\n      });\n    } else if (isArray(data_value)) {\n      data_value.forEach((v, index) => {\n        newData[`${k}[${index}]`] = v;\n      });\n    } else {\n      newData[k] = data[k];\n    }\n  });\n  return newData;\n}\n\nvar _default = {\n  decodeObject,\n  encodeObject\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5yZW5kZXIta2V5Ly4uL0NvQ3JlYXRlSlMvc3JjL3V0aWxzLmNydWQuanM/YTYwYyJdLCJuYW1lcyI6WyJfX21lcmdlT2JqZWN0IiwidGFyZ2V0Iiwic291cmNlIiwia2V5IiwiT2JqZWN0Iiwia2V5cyIsImFzc2lnbiIsIl9fY3JlYXRlT2JqZWN0IiwiZGF0YSIsInBhdGgiLCJzcGxpdCIsIm5ld09iamVjdCIsImkiLCJsZW5ndGgiLCJfX2NyZWF0ZUFycmF5IiwiaXRlbSIsImV4ZWMiLCJhcnJheUtleSIsImluZGV4IiwicGFyc2VJbnQiLCJBcnJheSIsImlzQXJyYXkiLCJjb25zb2xlIiwibG9nIiwiaXNPYmplY3QiLCJjb25zdHJ1Y3RvciIsImRlY29kZU9iamVjdCIsIm9iamVjdERhdGEiLCJmb3JFYWNoIiwiayIsIm5ld0RhdGEiLCJlbmNvZGVPYmplY3QiLCJkYXRhX3ZhbHVlIiwibmV3X29iaiIsIm5ld0tleXMiLCJuZXdLZXkiLCJ2YWx1ZSIsInYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFVQSxhQUFWLENBQXdCQyxNQUF4QixFQUFnQ0MsTUFBaEMsRUFDQTtBQUNDRCxRQUFNLEdBQUdBLE1BQU0sSUFBSSxFQUFuQjs7QUFDQSxPQUFLLElBQUlFLEdBQVQsSUFBZ0JDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxNQUFaLENBQWhCLEVBQXFDO0FBQ3BDLFFBQUlBLE1BQU0sQ0FBQ0MsR0FBRCxDQUFOLFlBQXVCQyxNQUEzQixFQUFtQztBQUNsQ0EsWUFBTSxDQUFDRSxNQUFQLENBQWNKLE1BQU0sQ0FBQ0MsR0FBRCxDQUFwQixFQUEyQkgsYUFBYSxDQUFDQyxNQUFNLENBQUNFLEdBQUQsQ0FBUCxFQUFjRCxNQUFNLENBQUNDLEdBQUQsQ0FBcEIsQ0FBeEM7QUFDQTtBQUNEOztBQUVEQyxRQUFNLENBQUNFLE1BQVAsQ0FBY0wsTUFBTSxJQUFJLEVBQXhCLEVBQTRCQyxNQUE1QjtBQUNBLFNBQU9ELE1BQVA7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OlsiZnVuY3Rpb24gXHRfX21lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlKSBcbntcblx0dGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xuXHRmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMoc291cmNlKSkge1xuXHRcdGlmIChzb3VyY2Vba2V5XSBpbnN0YW5jZW9mIE9iamVjdCkge1xuXHRcdFx0T2JqZWN0LmFzc2lnbihzb3VyY2Vba2V5XSwgX19tZXJnZU9iamVjdCh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pKVxuXHRcdH1cblx0fVxuXHRcblx0T2JqZWN0LmFzc2lnbih0YXJnZXQgfHwge30sIHNvdXJjZSlcblx0cmV0dXJuIHRhcmdldFxufVxuXG5mdW5jdGlvbiBfX2NyZWF0ZU9iamVjdChkYXRhLCBwYXRoKSBcbntcblx0aWYgKCFwYXRoKSByZXR1cm4gZGF0YTtcblx0XG5cdGxldCBrZXlzID0gcGF0aC5zcGxpdCgnLicpXG5cdGxldCBuZXdPYmplY3QgPSBkYXRhO1xuXG5cdGZvciAodmFyICBpID0ga2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdG5ld09iamVjdCA9IHtba2V5c1tpXV06IG5ld09iamVjdH1cdFx0XHRcdFxuXHR9XG5cdHJldHVybiBuZXdPYmplY3Q7XG59XG5cbmZ1bmN0aW9uIF9fY3JlYXRlQXJyYXkoa2V5LCBkYXRhKVxue1xuICB0cnkge1xuICAgIGxldCBpdGVtID0gLyhbXFx3XFxXXSspXFxbKFxcZCspXFxdL2dtLmV4ZWMoa2V5KVxuICAgIGlmIChpdGVtICYmIGl0ZW0ubGVuZ3RoID09IDMpIHtcbiAgICAgIGxldCBhcnJheUtleSA9IGl0ZW1bMV07XG4gICAgICBsZXQgaW5kZXggPSBwYXJzZUludChpdGVtWzJdKTtcbiAgICAgIFxuICAgICAgaWYgKCFkYXRhW2FycmF5S2V5XSB8fCAhQXJyYXkuaXNBcnJheShkYXRhW2FycmF5S2V5XSkpIHtcbiAgICAgICAgZGF0YVthcnJheUtleV0gPSBbXTtcbiAgICAgIH0gXG4gICAgICBkYXRhW2FycmF5S2V5XVtpbmRleF0gPSBkYXRhW2tleV07XG4gICAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgICAga2V5ID0gYXJyYXlLZXk7XG4gICAgfVxuICB9IGNhdGNoIHtcbiAgICBjb25zb2xlLmxvZygnY3JlYXRlIGFycmF5IGVycm9yJyk7XG4gIH1cbiAgcmV0dXJuIGtleTtcbn1cblxuXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuICghIWl0ZW0pICYmIChpdGVtLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xufVxuZnVuY3Rpb24gaXNBcnJheShpdGVtKSB7XG4gIHJldHVybiAoISFpdGVtKSAmJiAoaXRlbS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVPYmplY3QoZGF0YSkge1xuICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpXG4gIGxldCBvYmplY3REYXRhID0ge307XG4gIFxuICBrZXlzLmZvckVhY2goKGspID0+IHtcbiAgICBrID0gX19jcmVhdGVBcnJheShrLCBkYXRhKTtcbiAgICBpZiAoay5zcGxpdCgnLicpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGxldCBuZXdEYXRhID0gX19jcmVhdGVPYmplY3QoZGF0YVtrXSwgayk7XG4gICAgICBkZWxldGUgZGF0YVtrXTtcbiAgICAgIFxuICAgICAgb2JqZWN0RGF0YSA9IF9fbWVyZ2VPYmplY3Qob2JqZWN0RGF0YSwgbmV3RGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdERhdGFba10gPSBkYXRhW2tdO1xuICAgIH1cbiAgfSlcbiAgcmV0dXJuIG9iamVjdERhdGE7XG59XG5cbmZ1bmN0aW9uIGVuY29kZU9iamVjdChkYXRhKSB7XG4gIGxldCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIGxldCBuZXdEYXRhID0ge307XG4gIGtleXMuZm9yRWFjaCgoaykgPT4ge1xuICAgIGxldCBkYXRhX3ZhbHVlID0gZGF0YVtrXTtcbiAgICBpZiAoaXNPYmplY3QoZGF0YVtrXSkpIHtcbiAgICAgIGxldCBuZXdfb2JqID0gZW5jb2RlT2JqZWN0KGRhdGFba10pO1xuICAgICAgXG4gICAgICBsZXQgbmV3S2V5cyA9IE9iamVjdC5rZXlzKG5ld19vYmopO1xuICAgICAgbmV3S2V5cy5mb3JFYWNoKChuZXdLZXkpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gbmV3X29ialtuZXdLZXldO1xuICAgICAgICBuZXdLZXkgPSBrICsgXCIuXCIgKyBuZXdLZXk7XG4gICAgICAgIG5ld0RhdGFbbmV3S2V5XSA9IHZhbHVlO1xuICAgICAgfSlcbiAgICAgIFxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhX3ZhbHVlKSl7XG4gICAgICBkYXRhX3ZhbHVlLmZvckVhY2goKHYsIGluZGV4KSA9PiB7XG4gICAgICAgIG5ld0RhdGFbYCR7a31bJHtpbmRleH1dYF0gPSB2O1xuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3RGF0YVtrXSA9IGRhdGFba107XG4gICAgfVxuICB9KVxuICByZXR1cm4gbmV3RGF0YTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBkZWNvZGVPYmplY3QsXG4gIGVuY29kZU9iamVjdFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/utils.crud.js\n")},"../../CoCreateJS/src/utils.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.generateUUID = generateUUID;\nexports.isRealTime = isRealTime;\nexports.getParentFromElement = getParentFromElement;\nexports.isReadValue = isReadValue;\nexports.isUpdateValue = isUpdateValue;\nexports.isJsonString = isJsonString;\nexports.getAttributes = getAttributes;\nexports.checkValue = checkValue;\nexports.allFrame = allFrame;\nexports.cssPath = cssPath;\nexports.getTopMostWindow = getTopMostWindow;\nexports.findIframeFromElement = findIframeFromElement;\nexports.getIframeFromPath = getIframeFromPath;\nexports.configMatch2 = configMatch2;\nexports.configExecuter = configExecuter;\nexports.UUID = UUID;\nexports.parseTextToHtml = parseTextToHtml;\nexports.splitBydelimiter = splitBydelimiter;\nexports.joinBydelimiter = joinBydelimiter;\nexports.isValidSelector = isValidSelector;\nexports.getElementPath = getElementPath;\nexports.isUsageY = isUsageY;\nexports.default = void 0;\n\n/**\n * Created by jin\n * 2020-04-03\n */\nfunction generateUUID(length = 36) {\n  // if (length == 10) {\n  //   var result           = \'\';\n  //   var characters       = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n  //   var charactersLength = characters.length;\n  //   for ( var i = 0; i < length; i++ ) {\n  //     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  //   }\n  //   var dd = new Date().toTimeString();\n  //   var random = dd.replace(/[\\W_]+/g, "").substr(0,6);\n  //   result += random;\n  //   return result;\n  // }\n  let d = new Date().getTime();\n  let d2 = window.performance && window.performance.now && window.performance.now() * 1000 || 0;\n  let pattern = "uxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\n\n  if (length <= pattern.length) {\n    pattern = pattern.substr(0, length);\n  } else {\n    let add_len = length - pattern.length;\n    let sub_pattern = "-xxxyyxxx";\n    let group_n = Math.floor(add_len / sub_pattern.length);\n\n    for (let i = 0; i < group_n; i++) {\n      pattern += sub_pattern;\n    }\n\n    group_n = add_len - group_n * sub_pattern.length;\n    pattern += sub_pattern.substr(0, group_n);\n  }\n\n  let uuid = pattern.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16;\n\n    if (d > 0) {\n      var r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      var r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n\n    return (c == "x" ? r : r & 0x7 | 0x8).toString(16);\n  });\n  return uuid;\n}\n\nfunction isRealTime(element, parent_realTime) {\n  let realtime = element.getAttribute("data-realtime") || parent_realTime;\n\n  if (realtime === "false") {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getParentFromElement(element, parent_class, attributes) {\n  if (parent_class) {\n    if (element.classList.contains(parent_class)) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.classList) {\n      if (node.classList.contains(parent_class)) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  } else if (attributes) {\n    if (attributes.every(attr => element.attributes.hasOwnProperty(attr))) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.attributes) {\n      if (attributes.every(attr => node.attributes.hasOwnProperty(attr))) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  }\n\n  return false;\n}\n\nfunction isReadValue(element) {\n  return element.getAttribute("data-read_value") != "false";\n}\n\nfunction isUpdateValue(element) {\n  return element.getAttribute("data-update_value") != "false";\n}\n\nfunction isJsonString(str_data) {\n  try {\n    let json_data = JSON.parse(str_data);\n\n    if (typeof json_data === "object" && json_data != null) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction getAttributes(element) {\n  return element.getAttributeNames().reduce((attrMap, name) => {\n    attrMap[name] = element.getAttribute(name);\n    return attrMap;\n  }, {});\n}\n\nfunction checkValue(value) {\n  if (!value) return false;\n\n  if (/{{\\s*([\\w\\W]+)\\s*}}/g.test(value)) {\n    return false;\n  }\n\n  return true;\n} // hosseins utills\n// function to go through all frames\n\n\nfunction allFrame(callback) {\n  let allFrames = [{\n    document,\n    window\n  }];\n\n  for (let frame of document.querySelectorAll("iframe")) {\n    let frameDocument = frame.contentDocument || frame.contentWindow.document;\n    let frameWindow = frame.contentWindow;\n    allFrames.push({\n      document: frameDocument,\n      window: frameWindow,\n      frameElement: frame\n    });\n  }\n\n  let result = new Set();\n\n  for (let frame of allFrames) {\n    let callbackResult = callback(frame);\n    if (callbackResult && typeof callbackResult[Symbol.iterator] === "function") callbackResult.forEach(el => result.add(el));else if (callbackResult) result.add(callbackResult);\n  }\n\n  return Array.from(result);\n}\n\nfunction cssPath(node) {\n  let pathSplits = [];\n\n  do {\n    if (!node || !node.tagName) return false;\n    let pathSplit = node.tagName.toLowerCase();\n    if (node.id && node.tagName !== "BODY") pathSplit += "#" + node.id;\n\n    if (node.classList.length && node.tagName !== "BODY") {\n      node.classList.forEach(item => {\n        if (item.indexOf(":") === -1) pathSplit += "." + item;\n      });\n    }\n\n    if (node.tagName !== "BODY" && node.parentNode) {\n      let index = Array.prototype.indexOf.call(node.parentNode.children, node);\n      pathSplit += `:nth-child(${index + 1})`;\n    }\n\n    pathSplits.unshift(pathSplit);\n    node = node.parentNode;\n  } while (node.tagName !== "HTML");\n\n  return pathSplits.join(" > ");\n}\n\nfunction getTopMostWindow() {\n  let parentWindow = window;\n\n  while (parentWindow !== window.parent) parentWindow = window.parent;\n\n  return parentWindow;\n}\n\nfunction findIframeFromElement(windowObject, element) {\n  let frameElement;\n  allFrame(frame => {\n    if (frame.document.contains(element)) frameElement = frame.frameElement; // window.cc.findIframeFromElement(frame.window, element);\n  });\n  return frameElement;\n}\n\nfunction getIframeFromPath(path) {\n  let topWindow = getTopMostWindow;\n  path.forEach(selector => {\n    if (topWindow) topWindow = topWindow.querySelector(selector);\n  });\n  return topWindow;\n} // DO NOT REMOVE\n// configMatch: function* configMatch(elementConfig, element) {\n//   for (let config of elementConfig) {\n//     // if (!Array.isArray(config.selector))\n//     //   config.selector = [config.selector];\n//     if (config.selector && element.matches(config.selector)) yield config;\n//   }\n//   return;\n// },\n\n\nfunction configMatch2(elementConfig, element) {\n  let result = [];\n\n  for (let config of elementConfig) {\n    if (config.selector && element.matches(config.selector)) result.push(config);\n  }\n\n  return result;\n} // DO NOT REMOVE\n// an opiniated function uses configMatch2 to read configs\n// WARNING: the config iterated from top to bottom. for deseired effect elementConfig should be reveresed\n// typeof elementConfig: array of objects and every objects containing keys as false, true or a selector \n// element: the element to read attributes\n// key: the key in which is in elementConfig and on match onSuccess callback will be called\n\n\nfunction configExecuter(element, key, onSuccess, elementConfig) {\n  for (let config of configMatch2(elementConfig || window.elementConfig, element)) if (config[key] === true) return onSuccess(element, config);else if (config[key] === false) return false;else if (config[key] === undefined) continue;else if (isValidSelector(config[key])) return onSuccess(element, config, true);else console.warn("builder: wrong element config ", config);\n\n  return false;\n}\n\nfunction UUID(length = 10) {\n  var result = "";\n  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  var d = new Date().toTimeString();\n  var random = d.replace(/[\\W_]+/g, "").substr(0, 6);\n  result += random;\n  return result;\n}\n\nfunction parseTextToHtml(text) {\n  let doc = new DOMParser().parseFromString(text, "text/html");\n  if (doc.head.children[0]) return doc.head.children[0];else return doc.body.children[0];\n}\n\nfunction splitBydelimiter(str, delimiter) {\n  return str.split(delimiter).map(s => s.trim());\n}\n\nfunction joinBydelimiter(str, delimiter) {\n  return str.map(s => s.trim()).join(delimiter);\n}\n\nfunction isValidSelector(selector) {\n  try {\n    document.createDocumentFragment().querySelector(selector);\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getElementPath(element, returnContext) {\n  let path = [];\n  let topWindow = window;\n  let iframeElement = findIframeFromElement(topWindow, element);\n  let p = cssPath(iframeElement);\n  if (p) path.unshift(p);\n  return returnContext ? {\n    path,\n    document: iframeElement || document\n  } : path; //todo: support for nested iframe\n  // while(iframeElement !== findIframeFromElement(topWindow,iframeElement))\n  // {\n  //   iframeElement = findIframeFromElement(topWindow,iframeElement);\n  //   path.unshift(cssPath(iframeElement))\n  // }\n}\n\nfunction isUsageY(input) {\n  if (this.isJsonString(input.getAttribute(\'data-collection\'))) {\n    return false;\n  }\n\n  if (this.isJsonString(input.getAttribute(\'name\'))) {\n    return false;\n  }\n\n  if (input.tagName === "INPUT" && ["text", "email", "tel", "url"].includes(input.type) || input.tagName === "TEXTAREA") {\n    if (!input.getAttribute(\'name\')) {\n      return false;\n    }\n\n    if (input.getAttribute("data-realtime") == "false") {\n      return false;\n    }\n\n    if (input.getAttribute("data-unique") === "true") {\n      return false;\n    }\n\n    if (input.type === \'password\') {\n      return false;\n    }\n\n    if (!this.isReadValue(input)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar _default = {\n  isUsageY,\n  getElementPath,\n  isValidSelector,\n  joinBydelimiter,\n  splitBydelimiter,\n  parseTextToHtml,\n  UUID,\n  configExecuter,\n  configMatch2,\n  getIframeFromPath,\n  findIframeFromElement,\n  getTopMostWindow,\n  cssPath,\n  allFrame,\n  checkValue,\n  getAttributes,\n  isJsonString,\n  isUpdateValue,\n  isReadValue,\n  getParentFromElement,\n  isRealTime,\n  generateUUID\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5yZW5kZXIta2V5Ly4uL0NvQ3JlYXRlSlMvc3JjL3V0aWxzLmpzPzMyNDUiXSwibmFtZXMiOlsiZ2VuZXJhdGVVVUlEIiwibGVuZ3RoIiwiZCIsIkRhdGUiLCJnZXRUaW1lIiwiZDIiLCJ3aW5kb3ciLCJwZXJmb3JtYW5jZSIsIm5vdyIsInBhdHRlcm4iLCJzdWJzdHIiLCJhZGRfbGVuIiwic3ViX3BhdHRlcm4iLCJncm91cF9uIiwiTWF0aCIsImZsb29yIiwiaSIsInV1aWQiLCJyZXBsYWNlIiwiYyIsInIiLCJyYW5kb20iLCJ0b1N0cmluZyIsImlzUmVhbFRpbWUiLCJlbGVtZW50IiwicGFyZW50X3JlYWxUaW1lIiwicmVhbHRpbWUiLCJnZXRBdHRyaWJ1dGUiLCJnZXRQYXJlbnRGcm9tRWxlbWVudCIsInBhcmVudF9jbGFzcyIsImF0dHJpYnV0ZXMiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsIm5vZGUiLCJwYXJlbnROb2RlIiwiZXZlcnkiLCJhdHRyIiwiaGFzT3duUHJvcGVydHkiLCJpc1JlYWRWYWx1ZSIsImlzVXBkYXRlVmFsdWUiLCJpc0pzb25TdHJpbmciLCJzdHJfZGF0YSIsImpzb25fZGF0YSIsIkpTT04iLCJwYXJzZSIsImUiLCJnZXRBdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlTmFtZXMiLCJyZWR1Y2UiLCJhdHRyTWFwIiwibmFtZSIsImNoZWNrVmFsdWUiLCJ2YWx1ZSIsInRlc3QiLCJhbGxGcmFtZSIsImNhbGxiYWNrIiwiYWxsRnJhbWVzIiwiZG9jdW1lbnQiLCJmcmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmcmFtZURvY3VtZW50IiwiY29udGVudERvY3VtZW50IiwiY29udGVudFdpbmRvdyIsImZyYW1lV2luZG93IiwicHVzaCIsImZyYW1lRWxlbWVudCIsInJlc3VsdCIsIlNldCIsImNhbGxiYWNrUmVzdWx0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJmb3JFYWNoIiwiZWwiLCJhZGQiLCJBcnJheSIsImZyb20iLCJjc3NQYXRoIiwicGF0aFNwbGl0cyIsInRhZ05hbWUiLCJwYXRoU3BsaXQiLCJ0b0xvd2VyQ2FzZSIsImlkIiwiaXRlbSIsImluZGV4T2YiLCJpbmRleCIsInByb3RvdHlwZSIsImNhbGwiLCJjaGlsZHJlbiIsInVuc2hpZnQiLCJqb2luIiwiZ2V0VG9wTW9zdFdpbmRvdyIsInBhcmVudFdpbmRvdyIsInBhcmVudCIsImZpbmRJZnJhbWVGcm9tRWxlbWVudCIsIndpbmRvd09iamVjdCIsImdldElmcmFtZUZyb21QYXRoIiwicGF0aCIsInRvcFdpbmRvdyIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsImNvbmZpZ01hdGNoMiIsImVsZW1lbnRDb25maWciLCJjb25maWciLCJtYXRjaGVzIiwiY29uZmlnRXhlY3V0ZXIiLCJrZXkiLCJvblN1Y2Nlc3MiLCJ1bmRlZmluZWQiLCJpc1ZhbGlkU2VsZWN0b3IiLCJjb25zb2xlIiwid2FybiIsIlVVSUQiLCJjaGFyYWN0ZXJzIiwiY2hhcmFjdGVyc0xlbmd0aCIsImNoYXJBdCIsInRvVGltZVN0cmluZyIsInBhcnNlVGV4dFRvSHRtbCIsInRleHQiLCJkb2MiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJoZWFkIiwiYm9keSIsInNwbGl0QnlkZWxpbWl0ZXIiLCJzdHIiLCJkZWxpbWl0ZXIiLCJzcGxpdCIsIm1hcCIsInMiLCJ0cmltIiwiam9pbkJ5ZGVsaW1pdGVyIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImVycm9yIiwiZ2V0RWxlbWVudFBhdGgiLCJyZXR1cm5Db250ZXh0IiwiaWZyYW1lRWxlbWVudCIsInAiLCJpc1VzYWdlWSIsImlucHV0IiwiaW5jbHVkZXMiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBR08sU0FBU0EsWUFBVCxDQUFzQkMsTUFBTSxHQUFHLEVBQS9CLEVBQW1DO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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LEtBQVA7QUFDRDs7ZUFFYztBQUNiRCxVQURhO0FBRWJKLGdCQUZhO0FBR2J6QixpQkFIYTtBQUlic0IsaUJBSmE7QUFLYlAsa0JBTGE7QUFNYlAsaUJBTmE7QUFPYkwsTUFQYTtBQVFiUCxnQkFSYTtBQVNiSixjQVRhO0FBVWJMLG1CQVZhO0FBV2JGLHVCQVhhO0FBWWJILGtCQVphO0FBYWJkLFNBYmE7QUFjYnRCLFVBZGE7QUFlYkgsWUFmYTtBQWdCYkwsZUFoQmE7QUFpQmJOLGNBakJhO0FBa0JiRCxlQWxCYTtBQW1CYkQsYUFuQmE7QUFvQmJWLHNCQXBCYTtBQXFCYkwsWUFyQmE7QUFzQmJ2QjtBQXRCYSxDIiwiZmlsZSI6Ii4uLy4uL0NvQ3JlYXRlSlMvc3JjL3V0aWxzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IGppblxuICogMjAyMC0wNC0wM1xuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVVVJRChsZW5ndGggPSAzNikge1xuICAvLyBpZiAobGVuZ3RoID09IDEwKSB7XG4gIC8vICAgdmFyIHJlc3VsdCAgICAgICAgICAgPSAnJztcbiAgLy8gICB2YXIgY2hhcmFjdGVycyAgICAgICA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XG4gIC8vICAgdmFyIGNoYXJhY3RlcnNMZW5ndGggPSBjaGFyYWN0ZXJzLmxlbmd0aDtcbiAgLy8gICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyApIHtcbiAgLy8gICAgIHJlc3VsdCArPSBjaGFyYWN0ZXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzTGVuZ3RoKSk7XG4gIC8vICAgfVxuXG4gIC8vICAgdmFyIGRkID0gbmV3IERhdGUoKS50b1RpbWVTdHJpbmcoKTtcbiAgLy8gICB2YXIgcmFuZG9tID0gZGQucmVwbGFjZSgvW1xcV19dKy9nLCBcIlwiKS5zdWJzdHIoMCw2KTtcbiAgLy8gICByZXN1bHQgKz0gcmFuZG9tO1xuICAvLyAgIHJldHVybiByZXN1bHQ7XG4gIC8vIH1cblxuICBsZXQgZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICBsZXQgZDIgPVxuICAgICh3aW5kb3cucGVyZm9ybWFuY2UgJiZcbiAgICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cgJiZcbiAgICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSAqIDEwMDApIHx8XG4gICAgMDtcbiAgbGV0IHBhdHRlcm4gPSBcInV4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiO1xuXG4gIGlmIChsZW5ndGggPD0gcGF0dGVybi5sZW5ndGgpIHtcbiAgICBwYXR0ZXJuID0gcGF0dGVybi5zdWJzdHIoMCwgbGVuZ3RoKTtcbiAgfVxuICBlbHNlIHtcbiAgICBsZXQgYWRkX2xlbiA9IGxlbmd0aCAtIHBhdHRlcm4ubGVuZ3RoO1xuICAgIGxldCBzdWJfcGF0dGVybiA9IFwiLXh4eHl5eHh4XCI7XG5cbiAgICBsZXQgZ3JvdXBfbiA9IE1hdGguZmxvb3IoYWRkX2xlbiAvIHN1Yl9wYXR0ZXJuLmxlbmd0aCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwX247IGkrKykge1xuICAgICAgcGF0dGVybiArPSBzdWJfcGF0dGVybjtcbiAgICB9XG5cbiAgICBncm91cF9uID0gYWRkX2xlbiAtIGdyb3VwX24gKiBzdWJfcGF0dGVybi5sZW5ndGg7XG4gICAgcGF0dGVybiArPSBzdWJfcGF0dGVybi5zdWJzdHIoMCwgZ3JvdXBfbik7XG4gIH1cblxuICBsZXQgdXVpZCA9IHBhdHRlcm4ucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XG4gICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMTY7XG4gICAgaWYgKGQgPiAwKSB7XG4gICAgICB2YXIgciA9IChkICsgcikgJSAxNiB8IDA7XG4gICAgICBkID0gTWF0aC5mbG9vcihkIC8gMTYpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciByID0gKGQyICsgcikgJSAxNiB8IDA7XG4gICAgICBkMiA9IE1hdGguZmxvb3IoZDIgLyAxNik7XG4gICAgfVxuICAgIHJldHVybiAoYyA9PSBcInhcIiA/IHIgOiAociAmIDB4NykgfCAweDgpLnRvU3RyaW5nKDE2KTtcbiAgfSk7XG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSZWFsVGltZShlbGVtZW50LCBwYXJlbnRfcmVhbFRpbWUpIHtcbiAgbGV0IHJlYWx0aW1lID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXJlYWx0aW1lXCIpIHx8IHBhcmVudF9yZWFsVGltZTtcbiAgaWYgKHJlYWx0aW1lID09PSBcImZhbHNlXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmVudEZyb21FbGVtZW50KGVsZW1lbnQsIHBhcmVudF9jbGFzcywgYXR0cmlidXRlcykge1xuICBpZiAocGFyZW50X2NsYXNzKSB7XG4gICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHBhcmVudF9jbGFzcykpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGxldCBub2RlID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIHdoaWxlIChub2RlICE9IG51bGwgJiYgbm9kZS5jbGFzc0xpc3QpIHtcbiAgICAgIGlmIChub2RlLmNsYXNzTGlzdC5jb250YWlucyhwYXJlbnRfY2xhc3MpKSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoYXR0cmlidXRlcykge1xuICAgIGlmIChhdHRyaWJ1dGVzLmV2ZXJ5KChhdHRyKSA9PiBlbGVtZW50LmF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoYXR0cikpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICBsZXQgbm9kZSA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICB3aGlsZSAobm9kZSAhPSBudWxsICYmIG5vZGUuYXR0cmlidXRlcykge1xuICAgICAgaWYgKGF0dHJpYnV0ZXMuZXZlcnkoKGF0dHIpID0+IG5vZGUuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyKSkpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhZFZhbHVlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1yZWFkX3ZhbHVlXCIpICE9IFwiZmFsc2VcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVXBkYXRlVmFsdWUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXVwZGF0ZV92YWx1ZVwiKSAhPSBcImZhbHNlXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25TdHJpbmcoc3RyX2RhdGEpIHtcbiAgdHJ5IHtcbiAgICBsZXQganNvbl9kYXRhID0gSlNPTi5wYXJzZShzdHJfZGF0YSk7XG4gICAgaWYgKHR5cGVvZiBqc29uX2RhdGEgPT09IFwib2JqZWN0XCIgJiYganNvbl9kYXRhICE9IG51bGwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZXMoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGVOYW1lcygpLnJlZHVjZSgoYXR0ck1hcCwgbmFtZSkgPT4ge1xuICAgIGF0dHJNYXBbbmFtZV0gPSBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gYXR0ck1hcDtcbiAgfSwge30pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tWYWx1ZSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2U7XG4gIGlmICgve3tcXHMqKFtcXHdcXFddKylcXHMqfX0vZy50ZXN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLy8gaG9zc2VpbnMgdXRpbGxzXG5cbi8vIGZ1bmN0aW9uIHRvIGdvIHRocm91Z2ggYWxsIGZyYW1lc1xuZXhwb3J0IGZ1bmN0aW9uIGFsbEZyYW1lKGNhbGxiYWNrKSB7XG4gIGxldCBhbGxGcmFtZXMgPSBbeyBkb2N1bWVudCwgd2luZG93IH1dO1xuICBmb3IgKGxldCBmcmFtZSBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaWZyYW1lXCIpKSB7XG4gICAgbGV0IGZyYW1lRG9jdW1lbnQgPSBmcmFtZS5jb250ZW50RG9jdW1lbnQgfHwgZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgICBsZXQgZnJhbWVXaW5kb3cgPSBmcmFtZS5jb250ZW50V2luZG93O1xuICAgIGFsbEZyYW1lcy5wdXNoKHtcbiAgICAgIGRvY3VtZW50OiBmcmFtZURvY3VtZW50LFxuICAgICAgd2luZG93OiBmcmFtZVdpbmRvdyxcbiAgICAgIGZyYW1lRWxlbWVudDogZnJhbWUsXG4gICAgfSk7XG4gIH1cbiAgbGV0IHJlc3VsdCA9IG5ldyBTZXQoKTtcbiAgZm9yIChsZXQgZnJhbWUgb2YgYWxsRnJhbWVzKSB7XG4gICAgbGV0IGNhbGxiYWNrUmVzdWx0ID0gY2FsbGJhY2soZnJhbWUpO1xuICAgIGlmIChcbiAgICAgIGNhbGxiYWNrUmVzdWx0ICYmXG4gICAgICB0eXBlb2YgY2FsbGJhY2tSZXN1bHRbU3ltYm9sLml0ZXJhdG9yXSA9PT0gXCJmdW5jdGlvblwiXG4gICAgKVxuICAgICAgY2FsbGJhY2tSZXN1bHQuZm9yRWFjaCgoZWwpID0+IHJlc3VsdC5hZGQoZWwpKTtcbiAgICBlbHNlIGlmIChjYWxsYmFja1Jlc3VsdCkgcmVzdWx0LmFkZChjYWxsYmFja1Jlc3VsdCk7XG4gIH1cblxuICByZXR1cm4gQXJyYXkuZnJvbShyZXN1bHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3NzUGF0aChub2RlKSB7XG4gIGxldCBwYXRoU3BsaXRzID0gW107XG4gIGRvIHtcbiAgICBpZiAoIW5vZGUgfHwgIW5vZGUudGFnTmFtZSkgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBwYXRoU3BsaXQgPSBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobm9kZS5pZCAmJiBub2RlLnRhZ05hbWUgIT09IFwiQk9EWVwiKSBwYXRoU3BsaXQgKz0gXCIjXCIgKyBub2RlLmlkO1xuXG4gICAgaWYgKG5vZGUuY2xhc3NMaXN0Lmxlbmd0aCAmJiBub2RlLnRhZ05hbWUgIT09IFwiQk9EWVwiKSB7XG4gICAgICBub2RlLmNsYXNzTGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmluZGV4T2YoXCI6XCIpID09PSAtMSkgcGF0aFNwbGl0ICs9IFwiLlwiICsgaXRlbTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChub2RlLnRhZ05hbWUgIT09IFwiQk9EWVwiICYmIG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgbGV0IGluZGV4ID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlLmNoaWxkcmVuLFxuICAgICAgICBub2RlXG4gICAgICApO1xuICAgICAgcGF0aFNwbGl0ICs9IGA6bnRoLWNoaWxkKCR7aW5kZXggKyAxfSlgO1xuICAgIH1cblxuICAgIHBhdGhTcGxpdHMudW5zaGlmdChwYXRoU3BsaXQpO1xuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH0gd2hpbGUgKG5vZGUudGFnTmFtZSAhPT0gXCJIVE1MXCIpO1xuXG4gIHJldHVybiBwYXRoU3BsaXRzLmpvaW4oXCIgPiBcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb3BNb3N0V2luZG93KCkge1xuICBsZXQgcGFyZW50V2luZG93ID0gd2luZG93O1xuICB3aGlsZSAocGFyZW50V2luZG93ICE9PSB3aW5kb3cucGFyZW50KSBwYXJlbnRXaW5kb3cgPSB3aW5kb3cucGFyZW50O1xuICByZXR1cm4gcGFyZW50V2luZG93O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZElmcmFtZUZyb21FbGVtZW50KHdpbmRvd09iamVjdCwgZWxlbWVudCkge1xuICBsZXQgZnJhbWVFbGVtZW50O1xuICBhbGxGcmFtZSgoZnJhbWUpID0+IHtcbiAgICBpZiAoZnJhbWUuZG9jdW1lbnQuY29udGFpbnMoZWxlbWVudCkpIGZyYW1lRWxlbWVudCA9IGZyYW1lLmZyYW1lRWxlbWVudDtcbiAgICAvLyB3aW5kb3cuY2MuZmluZElmcmFtZUZyb21FbGVtZW50KGZyYW1lLndpbmRvdywgZWxlbWVudCk7XG4gIH0pO1xuICByZXR1cm4gZnJhbWVFbGVtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWZyYW1lRnJvbVBhdGgocGF0aCkge1xuICBsZXQgdG9wV2luZG93ID0gZ2V0VG9wTW9zdFdpbmRvdztcblxuICBwYXRoLmZvckVhY2goKHNlbGVjdG9yKSA9PiB7XG4gICAgaWYgKHRvcFdpbmRvdykgdG9wV2luZG93ID0gdG9wV2luZG93LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9KTtcbiAgcmV0dXJuIHRvcFdpbmRvdztcbn1cbi8vIERPIE5PVCBSRU1PVkVcblxuLy8gY29uZmlnTWF0Y2g6IGZ1bmN0aW9uKiBjb25maWdNYXRjaChlbGVtZW50Q29uZmlnLCBlbGVtZW50KSB7XG4vLyAgIGZvciAobGV0IGNvbmZpZyBvZiBlbGVtZW50Q29uZmlnKSB7XG4vLyAgICAgLy8gaWYgKCFBcnJheS5pc0FycmF5KGNvbmZpZy5zZWxlY3RvcikpXG4vLyAgICAgLy8gICBjb25maWcuc2VsZWN0b3IgPSBbY29uZmlnLnNlbGVjdG9yXTtcblxuLy8gICAgIGlmIChjb25maWcuc2VsZWN0b3IgJiYgZWxlbWVudC5tYXRjaGVzKGNvbmZpZy5zZWxlY3RvcikpIHlpZWxkIGNvbmZpZztcbi8vICAgfVxuLy8gICByZXR1cm47XG4vLyB9LFxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ01hdGNoMihlbGVtZW50Q29uZmlnLCBlbGVtZW50KSB7XG4gIGxldCByZXN1bHQgPSBbXTtcbiAgZm9yIChsZXQgY29uZmlnIG9mIGVsZW1lbnRDb25maWcpIHtcbiAgICBpZiAoY29uZmlnLnNlbGVjdG9yICYmIGVsZW1lbnQubWF0Y2hlcyhjb25maWcuc2VsZWN0b3IpKSByZXN1bHQucHVzaChjb25maWcpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIERPIE5PVCBSRU1PVkVcblxuLy8gYW4gb3BpbmlhdGVkIGZ1bmN0aW9uIHVzZXMgY29uZmlnTWF0Y2gyIHRvIHJlYWQgY29uZmlnc1xuLy8gV0FSTklORzogdGhlIGNvbmZpZyBpdGVyYXRlZCBmcm9tIHRvcCB0byBib3R0b20uIGZvciBkZXNlaXJlZCBlZmZlY3QgZWxlbWVudENvbmZpZyBzaG91bGQgYmUgcmV2ZXJlc2VkXG4vLyB0eXBlb2YgZWxlbWVudENvbmZpZzogYXJyYXkgb2Ygb2JqZWN0cyBhbmQgZXZlcnkgb2JqZWN0cyBjb250YWluaW5nIGtleXMgYXMgZmFsc2UsIHRydWUgb3IgYSBzZWxlY3RvciBcbi8vIGVsZW1lbnQ6IHRoZSBlbGVtZW50IHRvIHJlYWQgYXR0cmlidXRlc1xuLy8ga2V5OiB0aGUga2V5IGluIHdoaWNoIGlzIGluIGVsZW1lbnRDb25maWcgYW5kIG9uIG1hdGNoIG9uU3VjY2VzcyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZFxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ0V4ZWN1dGVyKGVsZW1lbnQsIGtleSwgb25TdWNjZXNzLCBlbGVtZW50Q29uZmlnKSB7XG4gIGZvciAobGV0IGNvbmZpZyBvZiBjb25maWdNYXRjaDIoZWxlbWVudENvbmZpZyB8fCB3aW5kb3cuZWxlbWVudENvbmZpZywgZWxlbWVudCkpXG4gICAgaWYgKGNvbmZpZ1trZXldID09PSB0cnVlKSByZXR1cm4gb25TdWNjZXNzKGVsZW1lbnQsIGNvbmZpZyk7XG4gICAgZWxzZSBpZiAoY29uZmlnW2tleV0gPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gIGVsc2UgaWYgKGNvbmZpZ1trZXldID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuICBlbHNlIGlmIChpc1ZhbGlkU2VsZWN0b3IoY29uZmlnW2tleV0pKVxuICAgIHJldHVybiBvblN1Y2Nlc3MoZWxlbWVudCwgY29uZmlnLCB0cnVlKTtcbiAgZWxzZSBjb25zb2xlLndhcm4oXCJidWlsZGVyOiB3cm9uZyBlbGVtZW50IGNvbmZpZyBcIiwgY29uZmlnKTtcblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBVVUlEKGxlbmd0aCA9IDEwKSB7XG4gIHZhciByZXN1bHQgPSBcIlwiO1xuICB2YXIgY2hhcmFjdGVycyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiO1xuXG4gIHZhciBjaGFyYWN0ZXJzTGVuZ3RoID0gY2hhcmFjdGVycy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVyc0xlbmd0aCkpO1xuICB9XG5cbiAgdmFyIGQgPSBuZXcgRGF0ZSgpLnRvVGltZVN0cmluZygpO1xuICB2YXIgcmFuZG9tID0gZC5yZXBsYWNlKC9bXFxXX10rL2csIFwiXCIpLnN1YnN0cigwLCA2KTtcbiAgcmVzdWx0ICs9IHJhbmRvbTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGV4dFRvSHRtbCh0ZXh0KSB7XG4gIGxldCBkb2MgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHRleHQsIFwidGV4dC9odG1sXCIpO1xuICBpZiAoZG9jLmhlYWQuY2hpbGRyZW5bMF0pIHJldHVybiBkb2MuaGVhZC5jaGlsZHJlblswXTtcbiAgZWxzZSByZXR1cm4gZG9jLmJvZHkuY2hpbGRyZW5bMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdEJ5ZGVsaW1pdGVyKHN0ciwgZGVsaW1pdGVyKSB7XG4gIHJldHVybiBzdHIuc3BsaXQoZGVsaW1pdGVyKS5tYXAoKHMpID0+IHMudHJpbSgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGpvaW5CeWRlbGltaXRlcihzdHIsIGRlbGltaXRlcikge1xuICByZXR1cm4gc3RyLm1hcCgocykgPT4gcy50cmltKCkpLmpvaW4oZGVsaW1pdGVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRTZWxlY3RvcihzZWxlY3Rvcikge1xuICB0cnkge1xuICAgIGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50UGF0aChlbGVtZW50LCByZXR1cm5Db250ZXh0KSB7XG4gIGxldCBwYXRoID0gW107XG5cbiAgbGV0IHRvcFdpbmRvdyA9IHdpbmRvdztcbiAgbGV0IGlmcmFtZUVsZW1lbnQgPSBmaW5kSWZyYW1lRnJvbUVsZW1lbnQodG9wV2luZG93LCBlbGVtZW50KTtcbiAgbGV0IHAgPSBjc3NQYXRoKGlmcmFtZUVsZW1lbnQpO1xuICBpZiAocCkgcGF0aC51bnNoaWZ0KHApO1xuXG4gIHJldHVybiByZXR1cm5Db250ZXh0ID8geyBwYXRoLCBkb2N1bWVudDogaWZyYW1lRWxlbWVudCB8fCBkb2N1bWVudCB9IDogcGF0aDtcbiAgLy90b2RvOiBzdXBwb3J0IGZvciBuZXN0ZWQgaWZyYW1lXG4gIC8vIHdoaWxlKGlmcmFtZUVsZW1lbnQgIT09IGZpbmRJZnJhbWVGcm9tRWxlbWVudCh0b3BXaW5kb3csaWZyYW1lRWxlbWVudCkpXG4gIC8vIHtcbiAgLy8gICBpZnJhbWVFbGVtZW50ID0gZmluZElmcmFtZUZyb21FbGVtZW50KHRvcFdpbmRvdyxpZnJhbWVFbGVtZW50KTtcbiAgLy8gICBwYXRoLnVuc2hpZnQoY3NzUGF0aChpZnJhbWVFbGVtZW50KSlcbiAgLy8gfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVc2FnZVkoaW5wdXQpIHtcbiAgaWYgKHRoaXMuaXNKc29uU3RyaW5nKGlucHV0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb2xsZWN0aW9uJykpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNKc29uU3RyaW5nKGlucHV0LmdldEF0dHJpYnV0ZSgnbmFtZScpKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICgoaW5wdXQudGFnTmFtZSA9PT0gXCJJTlBVVFwiICYmIFtcInRleHRcIiwgXCJlbWFpbFwiLCBcInRlbFwiLCBcInVybFwiXS5pbmNsdWRlcyhpbnB1dC50eXBlKSkgfHwgaW5wdXQudGFnTmFtZSA9PT0gXCJURVhUQVJFQVwiKSB7XG5cbiAgICBpZiAoIWlucHV0LmdldEF0dHJpYnV0ZSgnbmFtZScpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpbnB1dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXJlYWx0aW1lXCIpID09IFwiZmFsc2VcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChpbnB1dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXVuaXF1ZVwiKSA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3Bhc3N3b3JkJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc1JlYWRWYWx1ZShpbnB1dCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzVXNhZ2VZLFxuICBnZXRFbGVtZW50UGF0aCxcbiAgaXNWYWxpZFNlbGVjdG9yLFxuICBqb2luQnlkZWxpbWl0ZXIsXG4gIHNwbGl0QnlkZWxpbWl0ZXIsXG4gIHBhcnNlVGV4dFRvSHRtbCxcbiAgVVVJRCxcbiAgY29uZmlnRXhlY3V0ZXIsXG4gIGNvbmZpZ01hdGNoMixcbiAgZ2V0SWZyYW1lRnJvbVBhdGgsXG4gIGZpbmRJZnJhbWVGcm9tRWxlbWVudCxcbiAgZ2V0VG9wTW9zdFdpbmRvdyxcbiAgY3NzUGF0aCxcbiAgYWxsRnJhbWUsXG4gIGNoZWNrVmFsdWUsXG4gIGdldEF0dHJpYnV0ZXMsXG4gIGlzSnNvblN0cmluZyxcbiAgaXNVcGRhdGVWYWx1ZSxcbiAgaXNSZWFkVmFsdWUsXG4gIGdldFBhcmVudEZyb21FbGVtZW50LFxuICBpc1JlYWxUaW1lLFxuICBnZW5lcmF0ZVVVSURcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/utils.js\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));